\begin{Verbatim}[commandchars=\\\{\}]
\PYGdefault{n+no}{CODE}\PYGdefault{k+kd}{	EQU}	\PYGdefault{k+kc}{\PYGdefaultZdl{}}\PYGdefault{l+m+mi}{1000}
\PYGdefault{n+no}{DATA}\PYGdefault{k+kd}{	EQU}	\PYGdefault{k+kc}{\PYGdefaultZdl{}}\PYGdefault{l+m+mi}{2000}
\PYGdefault{n+no}{PORTB}\PYGdefault{k+kd}{	EQU}	\PYGdefault{k+kc}{\PYGdefaultZdl{}}\PYGdefault{l+m+mi}{0001}
\PYGdefault{n+no}{DDRB}\PYGdefault{k+kd}{	EQU}	\PYGdefault{k+kc}{\PYGdefaultZdl{}}\PYGdefault{l+m+mi}{0003}

	\PYGdefault{k}{ORG}	\PYGdefault{n+nv}{DATA}
\PYGdefault{n+nf}{COMPT32}	\PYGdefault{n+nb}{DS}\PYGdefault{n+nv}{.B}	\PYGdefault{l+m+mi}{4}	\PYGdefault{c+c1}{;On créé un compteur 32 bits sur 4 octets}
			\PYGdefault{c+c1}{;On pourrait également faire ça sur 2 mots binaires}
			\PYGdefault{c+c1}{;de 16 bits}

	\PYGdefault{k}{ORG}	\PYGdefault{n+nv}{CODE}
\PYGdefault{n+nf}{INIT}	\PYGdefault{n+nv}{LDX}	\PYGdefault{err}{\PYGdefaultZsh{}}\PYGdefault{n+nv}{COMPT32}\PYGdefault{c+c1}{;On charge le compteur 32 bits dans X}
	\PYGdefault{n+nf}{LDD}	\PYGdefault{err}{\PYGdefaultZsh{}}\PYGdefault{k+kc}{\PYGdefaultZdl{}}\PYGdefault{l+m+mi}{0000}	\PYGdefault{c+c1}{;On initialise l\PYGdefaultZsq{}accumulateur D}
	\PYGdefault{n+nf}{STD}	\PYGdefault{l+m+mi}{0}\PYGdefault{p}{,}\PYGdefault{n+nv}{X}	\PYGdefault{c+c1}{;On met à zéro la totalité du compteur}
	\PYGdefault{n+nf}{STD}	\PYGdefault{l+m+mi}{2}\PYGdefault{p}{,}\PYGdefault{n+nv}{X}	\PYGdefault{c+c1}{;}
	\PYGdefault{n+nf}{LDAA}	\PYGdefault{err}{\PYGdefaultZsh{}}\PYGdefault{k+kc}{\PYGdefaultZdl{}}\PYGdefault{n+nv}{FF}	\PYGdefault{c+c1}{;On charge 255 dans A}
	\PYGdefault{n+nf}{STAA}	\PYGdefault{n+nv}{DDRB}	\PYGdefault{c+c1}{;On initialise les LEDs en sortie}
	\PYGdefault{n+nf}{STAA}	\PYGdefault{n+nv}{PORTB}	\PYGdefault{c+c1}{;On éteint les LEDs}


	\PYGdefault{n+nf}{SEI}		\PYGdefault{c+c1}{;On arrête temporairement l\PYGdefaultZsq{}interruption pour}
			\PYGdefault{c+c1}{;l\PYGdefaultZsq{}installer}
	\PYGdefault{n+nf}{LDD}	\PYGdefault{err}{\PYGdefaultZsh{}}\PYGdefault{n+nv}{IT}	\PYGdefault{c+c1}{;On charge l\PYGdefaultZsq{}adresse de la fonction interruption}
			\PYGdefault{c+c1}{;dans D}
	\PYGdefault{n+nf}{STD}	\PYGdefault{k+kc}{\PYGdefaultZdl{}}\PYGdefault{l+m+mi}{3}\PYGdefault{n+nv}{E72}	\PYGdefault{c+c1}{;On charge ladresse dans le vecteur d\PYGdefaultZsq{}interruption}
			\PYGdefault{c+c1}{;sur IRQ}
			
	\PYGdefault{n+nf}{CLI}		\PYGdefault{c+c1}{;On enlève le masque sur l\PYGdefaultZsq{}interruption}

	
\PYGdefault{n+nf}{BOUCLE}	\PYGdefault{n+nv}{BRA}	\PYGdefault{n+nv}{BOUCLE}	\PYGdefault{c+c1}{;On réalise une boucle infinie vide}

	\PYGdefault{n+nf}{SWI}

\PYGdefault{n+nf}{IT}	\PYGdefault{n+nv}{BSR}	\PYGdefault{n+nv}{INCR32}	\PYGdefault{c+c1}{;L\PYGdefaultZsq{}interruption consiste en l\PYGdefaultZsq{}incrémentation du }
			\PYGdefault{c+c1}{;compteur 32 bits et l\PYGdefaultZsq{}affichage du poids le plus}
			\PYGdefault{c+c1}{;faible sur les LEDs.}
	\PYGdefault{n+nf}{LDAB}	\PYGdefault{l+m+mi}{3}\PYGdefault{p}{,}\PYGdefault{n+nv}{X}	\PYGdefault{c+c1}{;On récupère le poids le plus faible}
	\PYGdefault{n+nf}{COMB}		\PYGdefault{c+c1}{;On l\PYGdefaultZsq{}inverse}
	\PYGdefault{n+nf}{STAB}	\PYGdefault{n+nv}{PORTB}	\PYGdefault{c+c1}{;On l\PYGdefaultZsq{}affiche sur les LEDs}
	\PYGdefault{n+nf}{RTI}		\PYGdefault{c+c1}{;Retour d\PYGdefaultZsq{}interruption}

\PYGdefault{c+c1}{;*\PYGdefaultZhy{}\PYGdefaultZhy{} Incrémentation compteur 32 bits \PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}}
\PYGdefault{c+c1}{;On va incrémenter du poids le plus faible vers }
\PYGdefault{c+c1}{;le poids le plus fort. Le changement se fait si}
\PYGdefault{c+c1}{;la carry est levée. Sinon on sort de la fonction.}

\PYGdefault{n+nf}{INCR32}	\PYGdefault{n+nv}{INC}	\PYGdefault{l+m+mi}{3}\PYGdefault{p}{,}\PYGdefault{n+nv}{X}
	\PYGdefault{n+nf}{BCC}	\PYGdefault{n+nv}{FIN}
	\PYGdefault{n+nf}{INC}	\PYGdefault{l+m+mi}{2}\PYGdefault{p}{,}\PYGdefault{n+nv}{X}
	\PYGdefault{n+nf}{BCC}	\PYGdefault{n+nv}{FIN}
	\PYGdefault{n+nf}{INC}	\PYGdefault{l+m+mi}{1}\PYGdefault{p}{,}\PYGdefault{n+nv}{X}
	\PYGdefault{n+nf}{BCC}	\PYGdefault{n+nv}{FIN}
	\PYGdefault{n+nf}{INC}	\PYGdefault{l+m+mi}{0}\PYGdefault{p}{,}\PYGdefault{n+nv}{X}
\PYGdefault{n+nf}{FIN}	\PYGdefault{n+nv}{RTS}		\PYGdefault{c+c1}{;Retour de sous\PYGdefaultZhy{}routine}
\PYGdefault{c+c1}{;*\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}\PYGdefaultZhy{}}
\end{Verbatim}
